# k8s-specifications/honeytoken-service.yaml

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: honeytoken-script
  namespace: default
data:
  honeytoken.py: |
    import http.server, socketserver, sys, time

    class Handler(http.server.BaseHTTPRequestHandler):
        def _log(self):
            print("---- HONEYTOKEN HIT:", time.strftime("%Y-%m-%dT%H:%M:%S"), "----")
            print("PATH:", self.path)
            for k,v in self.headers.items():
                print(f"HDR {k}: {v}")

        def do_GET(self):
            self._log()
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"ok")

        def do_POST(self):
            length = int(self.headers.get('content-length',0))
            body = self.rfile.read(length) if length else b''
            self._log()
            print("BODY:", body.decode('utf-8', errors='replace'))
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"ok")

    server = socketserver.TCPServer(('', 8080), Handler)
    print('starting honeytoken service on 8080')
    server.serve_forever()

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: honeytoken-service
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: honeytoken-service
  template:
    metadata:
      labels:
        app: honeytoken-service
    spec:
      containers:
        - name: honeytoken
          image: python:3.11-alpine
          command: ["python", "/scripts/honeytoken.py"]
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: script-volume
              mountPath: /scripts
      volumes:
        - name: script-volume
          configMap:
            name: honeytoken-script

---
apiVersion: v1
kind: Service
metadata:
  name: honeytoken-service
  namespace: default
spec:
  selector:
    app: honeytoken-service
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
